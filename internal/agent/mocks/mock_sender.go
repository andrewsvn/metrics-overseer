// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andrewsvn/metrics-overseer/internal/agent/sender (interfaces: MetricSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/andrewsvn/metrics-overseer/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricSender is a mock of MetricSender interface.
type MockMetricSender struct {
	ctrl     *gomock.Controller
	recorder *MockMetricSenderMockRecorder
}

// MockMetricSenderMockRecorder is the mock recorder for MockMetricSender.
type MockMetricSenderMockRecorder struct {
	mock *MockMetricSender
}

// NewMockMetricSender creates a new mock instance.
func NewMockMetricSender(ctrl *gomock.Controller) *MockMetricSender {
	mock := &MockMetricSender{ctrl: ctrl}
	mock.recorder = &MockMetricSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricSender) EXPECT() *MockMetricSenderMockRecorder {
	return m.recorder
}

// SendMetric mocks base method.
func (m *MockMetricSender) SendMetric(arg0 *model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetric", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetric indicates an expected call of SendMetric.
func (mr *MockMetricSenderMockRecorder) SendMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetric", reflect.TypeOf((*MockMetricSender)(nil).SendMetric), arg0)
}

// SendMetricArray mocks base method.
func (m *MockMetricSender) SendMetricArray(arg0 []*model.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricArray", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetricArray indicates an expected call of SendMetricArray.
func (mr *MockMetricSenderMockRecorder) SendMetricArray(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricArray", reflect.TypeOf((*MockMetricSender)(nil).SendMetricArray), arg0)
}

// SendMetricValue mocks base method.
func (m *MockMetricSender) SendMetricValue(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetricValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetricValue indicates an expected call of SendMetricValue.
func (mr *MockMetricSenderMockRecorder) SendMetricValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetricValue", reflect.TypeOf((*MockMetricSender)(nil).SendMetricValue), arg0, arg1, arg2)
}
