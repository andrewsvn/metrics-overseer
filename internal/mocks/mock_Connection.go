// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pgxpool "github.com/jackc/pgx/v5/pgxpool"
)

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockConnection) Close() {
	_m.Called()
}

// MockConnection_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnection_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Close() *MockConnection_Close_Call {
	return &MockConnection_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnection_Close_Call) Run(run func()) *MockConnection_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Close_Call) Return() *MockConnection_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConnection_Close_Call) RunAndReturn(run func()) *MockConnection_Close_Call {
	_c.Run(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockConnection) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConnection_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockConnection_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConnection_Expecter) Ping(ctx interface{}) *MockConnection_Ping_Call {
	return &MockConnection_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockConnection_Ping_Call) Run(run func(ctx context.Context)) *MockConnection_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConnection_Ping_Call) Return(_a0 error) *MockConnection_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnection_Ping_Call) RunAndReturn(run func(context.Context) error) *MockConnection_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Pool provides a mock function with no fields
func (_m *MockConnection) Pool() *pgxpool.Pool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pool")
	}

	var r0 *pgxpool.Pool
	if rf, ok := ret.Get(0).(func() *pgxpool.Pool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}

	return r0
}

// MockConnection_Pool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pool'
type MockConnection_Pool_Call struct {
	*mock.Call
}

// Pool is a helper method to define mock.On call
func (_e *MockConnection_Expecter) Pool() *MockConnection_Pool_Call {
	return &MockConnection_Pool_Call{Call: _e.mock.On("Pool")}
}

func (_c *MockConnection_Pool_Call) Run(run func()) *MockConnection_Pool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnection_Pool_Call) Return(_a0 *pgxpool.Pool) *MockConnection_Pool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConnection_Pool_Call) RunAndReturn(run func() *pgxpool.Pool) *MockConnection_Pool_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
