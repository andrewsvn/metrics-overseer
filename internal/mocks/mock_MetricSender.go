// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	model "github.com/andrewsvn/metrics-overseer/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockMetricSender is an autogenerated mock type for the MetricSender type
type MockMetricSender struct {
	mock.Mock
}

type MockMetricSender_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricSender) EXPECT() *MockMetricSender_Expecter {
	return &MockMetricSender_Expecter{mock: &_m.Mock}
}

// SendMetric provides a mock function with given fields: metric
func (_m *MockMetricSender) SendMetric(metric *model.Metrics) error {
	ret := _m.Called(metric)

	if len(ret) == 0 {
		panic("no return value specified for SendMetric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Metrics) error); ok {
		r0 = rf(metric)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricSender_SendMetric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMetric'
type MockMetricSender_SendMetric_Call struct {
	*mock.Call
}

// SendMetric is a helper method to define mock.On call
//   - metric *model.Metrics
func (_e *MockMetricSender_Expecter) SendMetric(metric interface{}) *MockMetricSender_SendMetric_Call {
	return &MockMetricSender_SendMetric_Call{Call: _e.mock.On("SendMetric", metric)}
}

func (_c *MockMetricSender_SendMetric_Call) Run(run func(metric *model.Metrics)) *MockMetricSender_SendMetric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Metrics))
	})
	return _c
}

func (_c *MockMetricSender_SendMetric_Call) Return(_a0 error) *MockMetricSender_SendMetric_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricSender_SendMetric_Call) RunAndReturn(run func(*model.Metrics) error) *MockMetricSender_SendMetric_Call {
	_c.Call.Return(run)
	return _c
}

// SendMetricArray provides a mock function with given fields: metrics
func (_m *MockMetricSender) SendMetricArray(metrics []*model.Metrics) error {
	ret := _m.Called(metrics)

	if len(ret) == 0 {
		panic("no return value specified for SendMetricArray")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.Metrics) error); ok {
		r0 = rf(metrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricSender_SendMetricArray_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMetricArray'
type MockMetricSender_SendMetricArray_Call struct {
	*mock.Call
}

// SendMetricArray is a helper method to define mock.On call
//   - metrics []*model.Metrics
func (_e *MockMetricSender_Expecter) SendMetricArray(metrics interface{}) *MockMetricSender_SendMetricArray_Call {
	return &MockMetricSender_SendMetricArray_Call{Call: _e.mock.On("SendMetricArray", metrics)}
}

func (_c *MockMetricSender_SendMetricArray_Call) Run(run func(metrics []*model.Metrics)) *MockMetricSender_SendMetricArray_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*model.Metrics))
	})
	return _c
}

func (_c *MockMetricSender_SendMetricArray_Call) Return(_a0 error) *MockMetricSender_SendMetricArray_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricSender_SendMetricArray_Call) RunAndReturn(run func([]*model.Metrics) error) *MockMetricSender_SendMetricArray_Call {
	_c.Call.Return(run)
	return _c
}

// SendMetricValue provides a mock function with given fields: id, mtype, value
func (_m *MockMetricSender) SendMetricValue(id string, mtype string, value string) error {
	ret := _m.Called(id, mtype, value)

	if len(ret) == 0 {
		panic("no return value specified for SendMetricValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(id, mtype, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMetricSender_SendMetricValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMetricValue'
type MockMetricSender_SendMetricValue_Call struct {
	*mock.Call
}

// SendMetricValue is a helper method to define mock.On call
//   - id string
//   - mtype string
//   - value string
func (_e *MockMetricSender_Expecter) SendMetricValue(id interface{}, mtype interface{}, value interface{}) *MockMetricSender_SendMetricValue_Call {
	return &MockMetricSender_SendMetricValue_Call{Call: _e.mock.On("SendMetricValue", id, mtype, value)}
}

func (_c *MockMetricSender_SendMetricValue_Call) Run(run func(id string, mtype string, value string)) *MockMetricSender_SendMetricValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMetricSender_SendMetricValue_Call) Return(_a0 error) *MockMetricSender_SendMetricValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricSender_SendMetricValue_Call) RunAndReturn(run func(string, string, string) error) *MockMetricSender_SendMetricValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricSender creates a new instance of MockMetricSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricSender {
	mock := &MockMetricSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
